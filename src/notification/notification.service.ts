import { Injectable, NotFoundException } from '@nestjs/common';
import { CreateNotificationDto } from './dto/create-notification.dto';
import { UpdateNotificationDto } from './dto/update-notification.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Notification, NotificationType } from './entities/notification.entity';
import { Repository, In } from 'typeorm';
import { Users } from '../users/entities/user.entity';
import { Ticket } from '../ticket/entities/ticket.entity';
import { TicketStatus } from '../ticket_status/entities/ticket_status.entity';
import { TicketAssigned } from '../ticket_assigned/entities/ticket_assigned.entity';
import { MailerService } from '@nestjs-modules/mailer';
import { UserAllowRole } from '../user_allow_role/entities/user_allow_role.entity';
import { TicketCategory } from '../ticket_categories/entities/ticket_category.entity';
import { NotificationGateway } from './notification.gateway';

@Injectable()
export class NotificationService {
  constructor(
    @InjectRepository(Notification)
    private readonly notiRepo: Repository<Notification>,
    @InjectRepository(Users)
    private readonly userRepo: Repository<Users>,
    @InjectRepository(Ticket)
    private readonly ticketRepo: Repository<Ticket>,
    @InjectRepository(TicketStatus)
    private readonly statusRepo: Repository<TicketStatus>,
    @InjectRepository(TicketAssigned)
    private readonly ticketAssignedRepo: Repository<TicketAssigned>,
    @InjectRepository(UserAllowRole)
    private readonly userAllowRoleRepo: Repository<UserAllowRole>,
    @InjectRepository(TicketCategory)
    private readonly categoryRepo: Repository<TicketCategory>,

    private readonly mailerService: MailerService,
    private readonly notificationGateway: NotificationGateway,
  ) { }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ticket ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á Notification + ‡∏™‡πà‡∏á Email
   * ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° 3 ‡∏Å‡∏£‡∏ì‡∏µ:
   * 1Ô∏è‚É£ New Ticket
   * 2Ô∏è‚É£ Status Change
   * 3Ô∏è‚É£ Assignment
   */
  async notifyAllTicketChanges(
    ticketNo: string,
    options: { statusId?: number; assignedUserId?: number; isNewTicket?: boolean }
  ) {
    const { statusId, assignedUserId, isNewTicket } = options;
    const notifications: Notification[] = [];

    try {
      console.log(`üîî Starting notification process for ticket: ${ticketNo}`, options);

      // 1Ô∏è‚É£ Ticket ‡πÉ‡∏´‡∏°‡πà
      if (isNewTicket) {
        console.log('üì® Processing new ticket notification...');
        const newTicketNotis = await this.createNewTicketNotification(ticketNo);
        notifications.push(...newTicketNotis);
      }

      // 2Ô∏è‚É£ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (statusId) {
        console.log(`üîÑ Processing status change notification for status: ${statusId}`);
        const statusChangeNoti = await this.createStatusChangeNotification(ticketNo, statusId);
        if (statusChangeNoti) {
          notifications.push(statusChangeNoti);
        }
      }

      // 3Ô∏è‚É£ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
      if (assignedUserId) {
        console.log(`üë§ Processing assignment notification for user: ${assignedUserId}`);
        const assignmentNoti = await this.createAssignmentNotification(ticketNo, assignedUserId);
        if (assignmentNoti) {
          notifications.push(assignmentNoti);
        }
      }

      console.log(`‚úÖ Completed notification process. Created ${notifications.length} notifications`);
      return notifications;

    } catch (error) {
      console.error('‚ùå Error in notifyAllTicketChanges:', error);
      throw error;
    }
  }

  async createNotification(dto: CreateNotificationDto): Promise<Notification> {
    const notification = this.notiRepo.create({
      ...dto,
      is_read: dto.is_read ?? false,
      email_sent: dto.email_sent ?? false,
      create_date: new Date()
    });
    const savedNotification = await this.notiRepo.save(notification);
    
    // ‡∏™‡πà‡∏á WebSocket notification ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    await this.sendWebSocketNotification(savedNotification);
    
    return savedNotification;
  }

  async createNotificationsBulk(payload: {
    ticket_no: string;
    targetUserIds: number[];
    notification_type: NotificationType;
    title: string;
    message?: string;
    create_by: number
  }): Promise<Notification[]> {
    const createdNotifications = await Promise.all(
      payload.targetUserIds.map(uid =>
        this.createNotification({
          ticket_no: payload.ticket_no,
          user_id: uid,
          notification_type: payload.notification_type,
          title: payload.title,
          message: payload.message,
        }),
      ),
    );
    return createdNotifications;
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á)
  async createStatusChangeNotification(ticketNo: string, statusId: number): Promise<Notification | null> {
    try {
      console.log(`üîÑ Creating status change notification for ticket: ${ticketNo}, status: ${statusId}`);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticket
      const ticket = await this.ticketRepo.findOne({
        where: { ticket_no: ticketNo },
        relations: ['user'] // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ relation ‡∏Å‡∏±‡∏ö user
      });

      if (!ticket) {
        console.error(`‚ùå Ticket not found: ${ticketNo}`);
        throw new NotFoundException(`Ticket with number ${ticketNo} not found`);
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• status
      const status = await this.statusRepo.findOne({
        where: { id: statusId }
      });

      if (!status) {
        console.error(`‚ùå Status not found: ${statusId}`);
        throw new NotFoundException(`Status with ID ${statusId} not found`);
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á
      const reporter = await this.userRepo.findOne({
        where: { id: ticket.create_by }
      });

      if (!reporter) {
        console.error(`‚ùå Reporter not found for ticket: ${ticketNo}`);
        return null;
      }

      // ‚úÖ ‡∏î‡∏∂‡∏á status name ‡∏û‡∏£‡πâ‡∏≠‡∏° language support
      const languageId = 'th';
      const statusNameResult = await this.statusRepo
        .createQueryBuilder('ts')
        .leftJoin('ticket_status_language', 'tsl', 'tsl.status_id = ts.id AND tsl.language_id = :lang', { lang: languageId })
        .select('COALESCE(tsl.name)', 'name')
        .where('ts.id = :statusId', { statusId })
        .getRawOne();

      const statusName = statusNameResult?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á notification
      const notification = this.notiRepo.create({
        ticket_no: ticketNo,
        user_id: ticket.create_by,
        status_id: statusId,
        notification_type: NotificationType.STATUS_CHANGE,
        title: `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: #${ticket.id}`,
        message: `‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ${statusName}`,
        is_read: false,
        email_sent: false,
        create_date: new Date()
      });

      const savedNotification = await this.notiRepo.save(notification);
      console.log(`‚úÖ Status change notification created with ID: ${savedNotification.id}`);

      // ‡∏™‡πà‡∏á WebSocket notification
      await this.sendWebSocketNotification(savedNotification);

      // ‡∏™‡πà‡∏á email ‡πÅ‡∏ö‡∏ö async
      this.sendEmailNotification(savedNotification).catch(error => {
        console.error('‚ùå Failed to send status change email:', error);
      });

      return savedNotification;

    } catch (error) {
      console.error('‚ùå Error creating status change notification:', error);
      throw error;
    }
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö supporter/admin)
  async createNewTicketNotification(ticketNo: string): Promise<Notification[]> {
    try {
      console.log(`üì® Creating new ticket notification for: ${ticketNo}`);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticket
      const ticket = await this.ticketRepo.findOne({
        where: { ticket_no: ticketNo }
      });

      if (!ticket) {
        console.error(`‚ùå Ticket not found: ${ticketNo}`);
        throw new NotFoundException(`Ticket with number ${ticketNo} not found`);
      }

      // ‡∏´‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ role_id = 19 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      const adminUsers = await this.userRepo
        .createQueryBuilder('user')
        .distinct(true)
        .select(['user.id', 'user.email', 'user.firstname', 'user.lastname'])
        .innerJoin('users_allow_role', 'uar', 'uar.user_id = user.id')
        .where('uar.role_id = :roleId', { roleId: 19 })
        .andWhere('user.email IS NOT NULL')
        .andWhere('user.email != :empty', { empty: '' })
        .getMany();

      if (adminUsers.length === 0) {
        console.warn('‚ö†Ô∏è No admins with role_id 19 found for new ticket notification');
        return [];
      }

      console.log('EMAIL_USER:', process.env.EMAIL_USER);
      console.log('EMAIL_PASS:', process.env.EMAIL_PASS ? '‚úÖ Loaded' : '‚ùå Missing');
      console.log(`üë• Found ${adminUsers.length} admins (role_id: 19) to notify`);

      // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ category ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
      let categoryName = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠';
      if (ticket.categories_id) {
        try {
          const categoryLangResult = await this.categoryRepo.query(`
          SELECT tcl.name
          FROM ticket_categories_language tcl
          WHERE tcl.category_id = $1 AND tcl.language_id = $2
        `, [ticket.categories_id, 'th']);

          if (categoryLangResult && categoryLangResult.length > 0) {
            categoryName = categoryLangResult[0].name;
          }
          console.log('üîç Category for new ticket:', categoryName);
        } catch (error) {
          console.error('‚ùå Error querying category for new ticket:', error);
        }
      }

      const notifications: Notification[] = [];

      for (const admin of adminUsers) {
        try {
          const notification = this.notiRepo.create({
            ticket_no: ticketNo,
            user_id: admin.id,
            notification_type: NotificationType.NEW_TICKET,
            title: `‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà: #${ticketNo}`,
            message: `‡∏°‡∏µ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ - ${categoryName}`,
            is_read: false,
            email_sent: false,
            create_date: new Date()
          });

          const savedNotification = await this.notiRepo.save(notification);
          notifications.push(savedNotification);

          // ‡∏™‡πà‡∏á WebSocket notification
      await this.sendWebSocketNotification(savedNotification);

          // ‡∏™‡πà‡∏á email ‡πÅ‡∏ö‡∏ö async
          this.sendEmailNotification(savedNotification).catch(error => {
            console.error(`‚ùå Failed to send new ticket email to admin ${admin.id}:`, error);
          });

        } catch (error) {
          console.error(`‚ùå Error creating notification for admin ${admin.id}:`, error);
        }
      }

      console.log(`‚úÖ Created ${notifications.length} new ticket notifications for admins`);
      return notifications;

    } catch (error) {
      console.error('‚ùå Error creating new ticket notifications:', error);
      throw error;
    }
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö assignee) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  async createAssignmentNotification(ticketNo: string, assignedUserId: number): Promise<Notification | null> {
    try {
      console.log(`üë§ Creating assignment notification for ticket: ${ticketNo}, user: ${assignedUserId}`);

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticket
      const ticket = await this.ticketRepo.findOne({
        where: { ticket_no: ticketNo }
      });

      if (!ticket) {
        console.error(`‚ùå Ticket not found: ${ticketNo}`);
        throw new NotFoundException(`Ticket with number ${ticketNo} not found`);
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
      const assignedUser = await this.userRepo.findOne({
        where: { id: assignedUserId }
      });

      if (!assignedUser) {
        console.error(`‚ùå Assigned user not found: ${assignedUserId}`);
        throw new NotFoundException(`User with ID ${assignedUserId} not found`);
      }

      if (!assignedUser.email) {
        console.warn(`‚ö†Ô∏è Assigned user ${assignedUserId} has no email address`);
        return null;
      }

      // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      let categoryName = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠';
      if (ticket.categories_id) {
        try {
          const categoryLangResult = await this.categoryRepo.query(`
          SELECT tcl.name
          FROM ticket_categories_language tcl
          WHERE tcl.category_id = $1 AND tcl.language_id = $2
        `, [ticket.categories_id, 'th']);

          if (categoryLangResult && categoryLangResult.length > 0) {
            categoryName = categoryLangResult[0].name;
          }
          console.log('üîç Category for assignment:', categoryName);
        } catch (error) {
          console.error('‚ùå Error querying category for assignment:', error);
        }
      }

      const notification = this.notiRepo.create({
        ticket_no: ticketNo,
        user_id: assignedUserId,
        notification_type: NotificationType.ASSIGNMENT,
        title: `‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: #${ticketNo}`,
        message: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${categoryName}`,
        is_read: false,
        email_sent: false,
        create_date: new Date()
      });

      const savedNotification = await this.notiRepo.save(notification);
      console.log(`‚úÖ Assignment notification created with ID: ${savedNotification.id}`);

      // ‡∏™‡πà‡∏á WebSocket notification
      await this.sendWebSocketNotification(savedNotification);

      // ‡∏™‡πà‡∏á email ‡πÅ‡∏ö‡∏ö async
      this.sendEmailNotification(savedNotification).catch(error => {
        console.error('‚ùå Failed to send assignment email:', error);
      });

      return savedNotification;

    } catch (error) {
      console.error('‚ùå Error creating assignment notification:', error);
      throw error;
    }
  }

  private async sendWebSocketNotification(notification: Notification): Promise<void> {
    try {
      console.log(`üîå Sending WebSocket notification to user ${notification.user_id}`);

      // ‡∏™‡πà‡∏á notification ‡πÅ‡∏ö‡∏ö real-time
      await this.notificationGateway.sendNotificationToUser(notification.user_id, {
        id: notification.id,
        ticket_no: notification.ticket_no,
        notification_type: notification.notification_type,
        title: notification.title,
        message: notification.message,
        is_read: notification.is_read,
        create_date: notification.create_date,
      });

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó unread count
      const unreadCount = await this.getUnreadCount(notification.user_id);
      await this.notificationGateway.updateUnreadCount(notification.user_id, unreadCount);

      console.log(`‚úÖ WebSocket notification sent successfully`);
    } catch (error) {
      console.error(`‚ùå Error sending WebSocket notification:`, error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ WebSocket error ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
    }
  }

  // ‚úÖ ‡∏™‡πà‡∏á email notification
  private async sendEmailNotification(notification: Notification): Promise<void> {
    try {
      console.log(`üìß Sending email notification for ID: ${notification.id}, Type: ${notification.notification_type}`);

      let emailSent = false;

      switch (notification.notification_type) {
        case NotificationType.STATUS_CHANGE:
          emailSent = await this.sendStatusChangeEmail(notification);
          break;
        case NotificationType.NEW_TICKET:
          emailSent = await this.sendNewTicketEmail(notification);
          break;
        case NotificationType.ASSIGNMENT:
          emailSent = await this.sendAssignmentEmail(notification);
          break;
        default:
          console.warn(`‚ö†Ô∏è Unknown notification type: ${notification.notification_type}`);
          return;
      }

      if (emailSent) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á email
        await this.notiRepo.update(notification.id, {
          email_sent: true,
          email_sent_at: new Date()
        });
        console.log(`‚úÖ Email sent successfully for notification ID: ${notification.id}`);
      } else {
        console.warn(`‚ö†Ô∏è Email not sent for notification ID: ${notification.id}`);
      }

    } catch (error) {
      console.error(`‚ùå Failed to send email notification for ID ${notification.id}:`, error);
    }
  }

  // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
  private async sendStatusChangeEmail(notification: Notification): Promise<boolean> {
    try {
      // Load related entities if not already loaded
      const ticket = notification.ticket || await this.ticketRepo.findOne({
        where: { ticket_no: notification.ticket_no }
      });

      const user = notification.user || await this.userRepo.findOne({
        where: { id: notification.user_id }
      });

      const status = notification.status || (notification.status_id ? await this.statusRepo.findOne({
        where: { id: notification.status_id }
      }) : null);

      if (!user?.email || !ticket) {
        console.warn('‚ö†Ô∏è User email or ticket not found for notification:', notification.id);
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email format
      if (!this.isValidEmail(user.email)) {
        console.warn(`‚ö†Ô∏è Invalid email format: ${user.email}`);
        return false;
      }

      // ‡∏î‡∏∂‡∏á status name ‡∏à‡∏≤‡∏Å ticket_status_language - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      let statusName = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'; // ‡∏Ñ‡πà‡∏≤ default
      if (notification.status_id) {
        const statusLangResult = await this.statusRepo.query(`
        SELECT ts.id, tsl.name
        FROM ticket_status ts
        LEFT JOIN ticket_status_language tsl
          ON tsl.status_id = ts.id
          AND tsl.language_id = 'th'
        WHERE ts.id = $1 AND tsl.name IS NOT NULL
      `, [notification.status_id]);

        if (statusLangResult && statusLangResult.length > 0) {
          statusName = statusLangResult[0].name;
        }

        console.log('üîç Status query result:', statusLangResult);
      }

      // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ category ‡∏à‡∏≤‡∏Å ticket_categories_language - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      let categoryName = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠'; // ‡∏Ñ‡πà‡∏≤ default
      if (ticket.categories_id) {
        const categoryLangResult = await this.categoryRepo.query(`
        SELECT tc.id, tcl.name
        FROM ticket_categories tc
        LEFT JOIN ticket_categories_language tcl
          ON tcl.category_id = tc.id
          AND tcl.language_id = 'th'
        WHERE tc.id = $1 AND tcl.name IS NOT NULL
      `, [ticket.categories_id]);

        if (categoryLangResult && categoryLangResult.length > 0) {
          categoryName = categoryLangResult[0].name;
        }

        console.log('üîç Category query result:', categoryLangResult);
      }

      const userName = user.firstname && user.lastname
        ? `${user.firstname} ${user.lastname}`
        : user.firstname || user.lastname || user.email.split('@')[0];

      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç subject ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ categoryName ‡πÅ‡∏ó‡∏ô ticket.categories_id
      const subject = `[Ticket #${ticket.ticket_no}] ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${categoryName}`;

      const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Ticket Status Update</title>
      </head>
      <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
          
          <!-- Header -->
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px 20px; text-align: center;">
            <h1 style="margin: 0; font-size: 24px; font-weight: 600;">üé´ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ticket</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Support Ticket Management System</p>
          </div>

          <!-- Content -->
          <div style="padding: 30px 20px;">
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 25px; border-left: 4px solid #28a745;">
              <p style="margin: 0 0 10px 0; font-size: 16px;"><strong>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong> ‡∏Ñ‡∏∏‡∏ì${userName}</p>
              <p style="margin: 0; color: #666;">‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß</p>
            </div>

            <div style="background-color: #fff; border: 2px solid #e9ecef; padding: 25px; border-radius: 10px; margin-bottom: 25px;">
              <h3 style="margin: 0 0 20px 0; color: #495057; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Ticket</h3>
              
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; width: 150px; color: #495057;">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:</td>
                  <td style="padding: 12px 0; color: #007bff; font-weight: 600;">#${ticket.ticket_no}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:</td>
                  <td style="padding: 12px 0;">${categoryName}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà:</td>
                  <td style="padding: 12px 0;">
                    <span style="color: #28a745; font-weight: 600; background-color: #d4edda; padding: 8px 12px; border-radius: 20px; display: inline-block;">
                      ‚úÖ ${statusName}
                    </span>
                  </td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó:</td>
                  <td style="padding: 12px 0;">${new Date().toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}</td>
                </tr>
              </table>
            </div>

            <!-- Action Button -->
            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/tickets/${ticket.id}" 
                 style="display: inline-block; background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: 600; box-shadow: 0 4px 15px rgba(0,123,255,0.3); transition: all 0.3s ease;">
                üîç ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Ticket
              </a>
            </div>

            <!-- Additional Info -->
            <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; border-left: 4px solid #2196f3;">
              <p style="margin: 0; font-size: 14px; color: #1565c0;">
                üí° <strong>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</strong> ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
              </p>
            </div>
          </div>

          <!-- Footer -->
          <div style="background-color: #f8f9fa; padding: 25px 20px; border-top: 1px solid #e9ecef;">
            <div style="text-align: center; color: #6c757d;">
              <p style="margin: 0 0 10px 0; font-weight: 600;">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</p>
              <p style="margin: 0 0 15px 0;">‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô - Support Team</p>
              
              <div style="font-size: 12px; color: #868e96; margin-top: 20px; padding-top: 15px; border-top: 1px solid #dee2e6;">
                <p style="margin: 0;">üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</p>
                <p style="margin: 5px 0 0 0;">‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Support Ticket</p>
              </div>
            </div>
          </div>
        </div>
      </body>
      </html>
    `;

      return await this.sendEmailWithHtml(user.email, subject, htmlContent);

    } catch (error) {
      console.error('‚ùå Error sending status change email:', error);
      return false;
    }
  }

  // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  private async sendNewTicketEmail(notification: Notification): Promise<boolean> {
    try {
      const ticket = notification.ticket || await this.ticketRepo.findOne({
        where: { ticket_no: notification.ticket_no }
      });

      const user = notification.user || await this.userRepo.findOne({
        where: { id: notification.user_id }
      });

      if (!user?.email || !ticket) {
        console.warn('‚ö†Ô∏è User email or ticket not found for notification:', notification.id);
        return false;
      }

      if (!this.isValidEmail(user.email)) {
        console.warn(`‚ö†Ô∏è Invalid email format: ${user.email}`);
        return false;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
      const reporter = await this.userRepo.findOne({
        where: { id: ticket.create_by }
      });

      const reporterName = reporter
        ? (reporter.firstname && reporter.lastname
          ? `${reporter.firstname} ${reporter.lastname}`
          : reporter.firstname || reporter.lastname || `User ID: ${reporter.id}`)
        : `User ID: ${ticket.create_by}`;

      const userName = user.firstname && user.lastname
        ? `${user.firstname} ${user.lastname}`
        : user.firstname || user.lastname || user.email.split('@')[0];

      // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      let categoryName = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠';
      if (ticket.categories_id) {
        try {
          const categoryLangResult = await this.categoryRepo.query(`
          SELECT tcl.name
          FROM ticket_categories_language tcl
          WHERE tcl.category_id = $1 AND tcl.language_id = $2
        `, [ticket.categories_id, 'th']);

          if (categoryLangResult && categoryLangResult.length > 0) {
            categoryName = categoryLangResult[0].name;
          }

          console.log('üîç Category for email:', categoryName);
          console.log('üîç Category ID:', ticket.categories_id);
        } catch (error) {
          console.error('‚ùå Error querying category for email:', error);
        }
      }

      const subject = `[New Ticket #${ticket.ticket_no}] ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${categoryName}`;

      const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>New Ticket Assignment</title>
      </head>
      <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
          
          <!-- Header -->
          <div style="background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); color: white; padding: 30px 20px; text-align: center;">
            <h1 style="margin: 0; font-size: 24px; font-weight: 600;">üÜï Ticket ‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Support Ticket Management System</p>
          </div>

          <!-- Content -->
          <div style="padding: 30px 20px;">
            <div style="background-color: #fff3cd; padding: 20px; border-radius: 8px; margin-bottom: 25px; border-left: 4px solid #ffc107;">
              <p style="margin: 0 0 10px 0; font-size: 16px;"><strong>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong> ‡∏Ñ‡∏∏‡∏ì${userName}</p>
              <p style="margin: 0; color: #856404;">‡∏°‡∏µ ticket ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</p>
            </div>

            <div style="background-color: #fff; border: 2px solid #e9ecef; padding: 25px; border-radius: 10px; margin-bottom: 25px;">
              <h3 style="margin: 0 0 20px 0; color: #495057; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Ticket</h3>
              
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; width: 150px; color: #495057;">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:</td>
                  <td style="padding: 12px 0; color: #dc3545; font-weight: 600;">#${ticket.ticket_no}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:</td>
                  <td style="padding: 12px 0; font-weight: 600; color: #007bff;">${categoryName}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</td>
                  <td style="padding: 12px 0;">${ticket.issue_description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á:</td>
                  <td style="padding: 12px 0;">${reporterName}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á:</td>
                  <td style="padding: 12px 0;">${ticket.create_date?.toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      }) || new Date().toLocaleDateString('th-TH')}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:</td>
                  <td style="padding: 12px 0;">
                    <span style="color: #dc3545; font-weight: 600; background-color: #f8d7da; padding: 6px 12px; border-radius: 15px; display: inline-block;">
                      üî• ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
                    </span>
                  </td>
                </tr>
              </table>
            </div>

            <!-- Action Buttons -->
            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/tickets/${ticket.id}/assign" 
                 style="display: inline-block; background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 15px 25px; text-decoration: none; border-radius: 25px; font-weight: 600; margin: 0 10px 10px 0; box-shadow: 0 4px 15px rgba(40,167,69,0.3);">
                üéØ ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢
              </a>
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/tickets/${ticket.id}" 
                 style="display: inline-block; background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; padding: 15px 25px; text-decoration: none; border-radius: 25px; font-weight: 600; margin: 0 10px 10px 0; box-shadow: 0 4px 15px rgba(0,123,255,0.3);">
                üëÄ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
              </a>
            </div>

            <!-- Priority Notice -->
            <div style="background-color: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107; margin-bottom: 20px;">
              <p style="margin: 0; font-size: 14px; color: #856404;">
                ‚ö° <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏Å‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
              </p>
            </div>
          </div>

          <!-- Footer -->
          <div style="background-color: #f8f9fa; padding: 25px 20px; border-top: 1px solid #e9ecef;">
            <div style="text-align: center; color: #6c757d;">
              <p style="margin: 0 0 10px 0; font-weight: 600;">‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô - Support Team</p>
              
              <div style="font-size: 12px; color: #868e96; margin-top: 20px; padding-top: 15px; border-top: 1px solid #dee2e6;">
                <p style="margin: 0;">üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</p>
                <p style="margin: 5px 0 0 0;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</p>
              </div>
            </div>
          </div>
        </div>
      </body>
      </html>
    `;

      return await this.sendEmailWithHtml(user.email, subject, htmlContent);

    } catch (error) {
      console.error('‚ùå Error sending new ticket email:', error);
      return false;
    }
  }

  // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  private async sendAssignmentEmail(notification: Notification): Promise<boolean> {
    try {
      const ticket = notification.ticket || await this.ticketRepo.findOne({
        where: { ticket_no: notification.ticket_no }
      });

      const user = notification.user || await this.userRepo.findOne({
        where: { id: notification.user_id }
      });

      if (!user?.email || !ticket) {
        console.warn('‚ö†Ô∏è User email or ticket not found for notification:', notification.id);
        return false;
      }

      if (!this.isValidEmail(user.email)) {
        console.warn(`‚ö†Ô∏è Invalid email format: ${user.email}`);
        return false;
      }

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
      const reporter = await this.userRepo.findOne({
        where: { id: ticket.create_by }
      });

      const reporterName = reporter
        ? (reporter.firstname && reporter.lastname
          ? `${reporter.firstname} ${reporter.lastname}`
          : reporter.firstname || reporter.lastname || `User ID: ${reporter.id}`)
        : `User ID: ${ticket.create_by}`;

      const userName = user.firstname && user.lastname
        ? `${user.firstname} ${user.lastname}`
        : user.firstname || user.lastname || user.email.split('@')[0];

      // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ category ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      let categoryName = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠';
      if (ticket.categories_id) {
        try {
          const categoryLangResult = await this.categoryRepo.query(`
          SELECT tcl.name
          FROM ticket_categories_language tcl
          WHERE tcl.category_id = $1 AND tcl.language_id = $2
        `, [ticket.categories_id, 'th']);

          if (categoryLangResult && categoryLangResult.length > 0) {
            categoryName = categoryLangResult[0].name;
          }

          console.log('üîç Category for assignment email:', categoryName);
          console.log('üîç Category ID:', ticket.categories_id);
        } catch (error) {
          console.error('‚ùå Error querying category for assignment email:', error);
        }
      }

      const subject = `[Assignment #${ticket.ticket_no}] ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${categoryName}`;

      const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>Ticket Assignment</title>
      </head>
      <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background-color: #f4f4f4; margin: 0; padding: 0;">
        <div style="max-width: 600px; margin: 0 auto; background-color: #ffffff; box-shadow: 0 0 10px rgba(0,0,0,0.1);">
          
          <!-- Header -->
          <div style="background: linear-gradient(135deg, #6f42c1 0%, #563d7c 100%); color: white; padding: 30px 20px; text-align: center;">
            <h1 style="margin: 0; font-size: 24px; font-weight: 600;">üë§ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Support Ticket Management System</p>
          </div>

          <!-- Content -->
          <div style="padding: 30px 20px;">
            <div style="background-color: #e7e3ff; padding: 20px; border-radius: 8px; margin-bottom: 25px; border-left: 4px solid #6f42c1;">
              <p style="margin: 0 0 10px 0; font-size: 16px;"><strong>‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</strong> ‡∏Ñ‡∏∏‡∏ì${userName}</p>
              <p style="margin: 0; color: #5a4fcf;">‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</p>
            </div>

            <div style="background-color: #fff; border: 2px solid #e9ecef; padding: 25px; border-radius: 10px; margin-bottom: 25px;">
              <h3 style="margin: 0 0 20px 0; color: #495057; border-bottom: 2px solid #e9ecef; padding-bottom: 10px;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢</h3>
              
              <table style="width: 100%; border-collapse: collapse;">
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; width: 150px; color: #495057;">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á:</td>
                  <td style="padding: 12px 0; color: #6f42c1; font-weight: 600;">#${ticket.ticket_no}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:</td>
                  <td style="padding: 12px 0; font-weight: 600; color: #007bff;">${categoryName}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</td>
                  <td style="padding: 12px 0;">${ticket.issue_description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á:</td>
                  <td style="padding: 12px 0;">${reporterName}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢:</td>
                  <td style="padding: 12px 0;">${new Date().toLocaleDateString('th-TH', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}</td>
                </tr>
                <tr>
                  <td style="padding: 12px 0; font-weight: 600; color: #495057;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</td>
                  <td style="padding: 12px 0;">
                    <span style="color: #6f42c1; font-weight: 600; background-color: #e7e3ff; padding: 8px 12px; border-radius: 20px; display: inline-block;">
                      üìã ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                    </span>
                  </td>
                </tr>
              </table>
            </div>

            <!-- Action Buttons -->
            <div style="text-align: center; margin: 30px 0;">
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/tickets/${ticket.id}/work" 
                 style="display: inline-block; background: linear-gradient(135deg, #6f42c1 0%, #563d7c 100%); color: white; padding: 15px 25px; text-decoration: none; border-radius: 25px; font-weight: 600; margin: 0 10px 10px 0; box-shadow: 0 4px 15px rgba(111,66,193,0.3);">
                üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
              </a>
              <a href="${process.env.FRONTEND_URL || 'http://localhost:3000'}/tickets/${ticket.id}" 
                 style="display: inline-block; background: linear-gradient(135deg, #007bff 0%, #0056b3 100%); color: white; padding: 15px 25px; text-decoration: none; border-radius: 25px; font-weight: 600; margin: 0 10px 10px 0; box-shadow: 0 4px 15px rgba(0,123,255,0.3);">
                üìã ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
              </a>
            </div>

            <!-- Work Guidelines -->
            <div style="background-color: #e3f2fd; padding: 20px; border-radius: 8px; border-left: 4px solid #2196f3; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #1565c0;">üìù ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô</h4>
              <ul style="margin: 0; padding-left: 20px; color: #1565c0;">
                <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</li>
                <li>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</li>
                <li>‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞</li>
                <li>‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</li>
              </ul>
            </div>
          </div>

          <!-- Footer -->
          <div style="background-color: #f8f9fa; padding: 25px 20px; border-top: 1px solid #e9ecef;">
            <div style="text-align: center; color: #6c757d;">
              <p style="margin: 0 0 10px 0; font-weight: 600;">‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô - Support Team</p>
              
              <div style="font-size: 12px; color: #868e96; margin-top: 20px; padding-top: 15px; border-top: 1px solid #dee2e6;">
                <p style="margin: 0;">üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö</p>
                <p style="margin: 5px 0 0 0;">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô</p>
              </div>
            </div>
          </div>
        </div>
      </body>
      </html>
    `;

      return await this.sendEmailWithHtml(user.email, subject, htmlContent);

    } catch (error) {
      console.error('‚ùå Error sending assignment email:', error);
      return false;
    }
  }

  // ‚úÖ Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á HTML email
  private async sendEmailWithHtml(to: string, subject: string, htmlContent: string): Promise<boolean> {
    try {
      console.log(`üìß Sending email to: ${to}, Subject: ${subject}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email format
      if (!this.isValidEmail(to)) {
        console.warn(`‚ö†Ô∏è Invalid email format: ${to}`);
        return false;
      }

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏î‡πâ‡∏ß‡∏¢ MailerService
      await this.mailerService.sendMail({
        to: to,
        subject: subject,
        html: htmlContent,
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        from: process.env.MAIL_FROM || 'noreply@support.com',
      });

      console.log(`‚úÖ HTML Email sent successfully to: ${to}`);
      return true;

    } catch (error) {
      console.error(`‚ùå Failed to send HTML email to ${to}:`, error);

      // Log ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î error
      if (error.response) {
        console.error('Email service response:', error.response);
      }
      if (error.code) {
        console.error('Email service error code:', error.code);
      }

      return false;
    }
  }

  // ‚úÖ Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö email format
  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  private async getUserEmailsByRoles(roleIds: number[]): Promise<string[]> {
    const userAllowRoles = await this.userAllowRoleRepo.find({
      where: { role_id: In(roleIds) },
      relations: ['user'],
    });

    return userAllowRoles
      .map(uar => uar.user?.email)
      .filter((email): email is string => !!email && this.isValidEmail(email));
  }

  // ================================
  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ notification
  // ================================

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  async getUserNotifications(userId: number, page: number = 1, limit: number = 20) {
    try {
      if (!userId || userId <= 0) {
        throw new Error('Invalid user ID');
      }

      if (page < 1) page = 1;
      if (limit < 1 || limit > 100) limit = 20;

      const [notifications, total] = await this.notiRepo.findAndCount({
        where: { user_id: userId },
        relations: ['user', 'ticket', 'status'],
        order: { create_date: 'DESC' },
        skip: (page - 1) * limit,
        take: limit
      });

      return {
        notifications,
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit)
      };
    } catch (error) {
      console.error('‚ùå Error getting user notifications:', error);
      throw error;
    }
  }

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç markAsRead ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó WebSocket
  async markAsRead(notificationId: number, userId: number) {
    try {
      const notification = await this.notiRepo.findOne({
        where: { id: notificationId, user_id: userId }
      });

      if (!notification) {
        throw new NotFoundException('Notification not found or access denied');
      }

      if (notification.is_read) {
        return notification;
      }

      await this.notiRepo.update(notificationId, {
        is_read: true,
        read_at: new Date()
      });

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó unread count ‡∏ú‡πà‡∏≤‡∏ô WebSocket
      const unreadCount = await this.getUnreadCount(userId);
      await this.notificationGateway.updateUnreadCount(userId, unreadCount);

      return await this.notiRepo.findOne({
        where: { id: notificationId },
        relations: ['user', 'ticket', 'status']
      });
    } catch (error) {
      console.error('‚ùå Error marking notification as read:', error);
      throw error;
    }
  }

  // ‚úÖ ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  async markAllAsRead(userId: number) {
    try {
      const result = await this.notiRepo.update(
        { user_id: userId, is_read: false },
        { is_read: true, read_at: new Date() }
      );

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó unread count ‡∏ú‡πà‡∏≤‡∏ô WebSocket (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 0)
      await this.notificationGateway.updateUnreadCount(userId, 0);

      return { updated: result.affected || 0 };
    } catch (error) {
      console.error('‚ùå Error marking all notifications as read:', error);
      throw error;
    }
  }

  // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
  async getUnreadCount(userId: number): Promise<number> {
    try {
      if (!userId || userId <= 0) {
        return 0;
      }

      return await this.notiRepo.count({
        where: { user_id: userId, is_read: false }
      });
    } catch (error) {
      console.error('‚ùå Error getting unread count:', error);
      return 0;
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  async getNotificationsByType(userId: number, type: NotificationType, page: number = 1, limit: number = 20) {
    try {
      if (!userId || userId <= 0) {
        throw new Error('Invalid user ID');
      }

      if (page < 1) page = 1;
      if (limit < 1 || limit > 100) limit = 20;

      const [notifications, total] = await this.notiRepo.findAndCount({
        where: { user_id: userId, notification_type: type },
        relations: ['user', 'ticket', 'status'],
        order: { create_date: 'DESC' },
        skip: (page - 1) * limit,
        take: limit
      });

      return {
        notifications,
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit)
      };
    } catch (error) {
      console.error('‚ùå Error getting notifications by type:', error);
      throw error;
    }
  }

  // ‚úÖ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å ID
  async findNotificationById(id: number) {
    return await this.notiRepo.findOne({
      where: { id },
      relations: ['user', 'ticket', 'status']
    });
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô supporter ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  async isUserSupporter(userId: number): Promise<boolean> {
    try {
      const supporterRoleIds = [2, 5, 6, 7, 8, 9, 10, 12, 13];

      const userRole = await this.userRepo
        .createQueryBuilder('user')
        .innerJoin('user_allow_role', 'uar', 'uar.user_id = user.id')
        .innerJoin('master_role', 'mr', 'mr.id = uar.role_id')
        .where('user.id = :userId', { userId })
        .andWhere('mr.id IN (:...supporterRoleIds)', { supporterRoleIds })
        .getOne();

      return !!userRole;
    } catch (error) {
      console.error('‚ùå Error checking if user is supporter:', error);
      return false;
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á ticket
  async getTicketNotifications(ticketNo: string, page: number = 1, limit: number = 20) {
    try {
      if (page < 1) page = 1;
      if (limit < 1 || limit > 100) limit = 20;

      const [notifications, total] = await this.notiRepo.findAndCount({
        where: { ticket_no: ticketNo },
        relations: ['user', 'ticket', 'status'],
        order: { create_date: 'DESC' },
        skip: (page - 1) * limit,
        take: limit
      });

      return {
        notifications,
        total,
        page,
        limit,
        totalPages: Math.ceil(total / limit)
      };
    } catch (error) {
      console.error('‚ùå Error getting ticket notifications:', error);
      throw error;
    }
  }

  // ================================
  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ implement
  // ================================

  create(createNotificationDto: CreateNotificationDto) {
    return 'This action adds a new notification';
  }

  findAll() {
    return 'This action returns all notification';
  }

  findOne(id: number) {
    return `This action returns a #${id} notification`;
  }

  update(id: number, updateNotificationDto: UpdateNotificationDto) {
    return `This action updates a #${id} notification`;
  }

  remove(id: number) {
    return `This action removes a #${id} notification`;
  }
}